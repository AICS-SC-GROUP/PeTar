5c5
<      &                  bpp,vkick)
---
>      &                  btype,vkick)
30a31,32
> * Revised on 15th May 2016 to include a new treatment for HG stars during the CE phase and
> * velocity kick for supernova (NSs and BHs).
42a45,49
> * Reference for updates: 
> * Giacobbo et al. 2018, MNRAS, 474, 2959 (MOBSE paper I)
> * Giacobbo & Mapelli 2018, MNRAS, 480, 2011 (MOBSE paper II)
> * Giacobbo & Mapelli 2020, ApJ, 891, 141 (Kicks paper)
> *
155c162,176
< *
---
> * May 2017 *
> * Some upgrades:
> *           1) New treatment for the HG stars during the CE phase.
> *              During the HG phase, stars do not present a steep density
> *              gradient between the core and the envelope and for this reason
> *              their response to the CE phase should be similar to that of MS
> *              stars (see Ivanova & Taam 2004). In BSE, when a MS star enters
> *              a CE phase as donor it merges with the accretor, while HG donors
> *              are allowed to survive the CE phase. In MOBSE we imposed that
> *              even HG donors merge with their companions if they enter a CE phase.
> *           2) new to compute the velocity kick for both neutron stars and
> *              black holes.
> *           3) nsflag   - new prescriptions for supernova explosions (SN).
> *           4) pisnflag - it allows to activate the PISN (Pair Instability)
> *                         and PPISN (Pulsation PISN).
160,161c181,182
<       PARAMETER(loop=20000)
<       INTEGER kstar(2),kw,kst,kw1,kw2,kmin,kmax
---
>       PARAMETER(loop=60000)
>       INTEGER kstar(2),kw,kst,kw1,kw2,kmin,kmax,helper(2)
164,165c185,186
<       INTEGER ceflag,tflag,ifflag,nsflag,wdflag
<       COMMON /FLAGS/ ceflag,tflag,ifflag,nsflag,wdflag
---
>       INTEGER ceflag,tflag,ifflag,nsflag,wdflag,piflag
>       COMMON /FLAGS/ ceflag,tflag,ifflag,nsflag,wdflag,piflag
173a195
>       REAL*8 ecc_bk
182d203
<       REAL*8 ecc_bk
189,190c210,211
<       REAL*8 neta,bwind,hewind
<       COMMON /VALUE1/ neta,bwind,hewind
---
>       REAL*8 neta,bwind,hewind,mxns
>       COMMON /VALUE1/ neta,bwind,hewind,mxns
193,194d213
<       real*8 FBFAC,FBTOT,MCO
<       integer ECS
200,203c219,220
< *     kick information 
<       INTEGER ikick,jp,jpmax
<       PARAMETER(jpmax=8)
< 
---
> *     kick information
>       INTEGER ikick,btype
206c223
< *      LOGICAL isave,iplot
---
> c      LOGICAL isave,iplot
210,211c227,229
< *      REAL bcm(50000,34),bpp(80,10)
< *      COMMON /BINARY/ bcm,bpp
---
> c      REAL bcm(50000,34),bpp(200,33)
> c      COMMON /BINARY/ bcm,bpp
> *
215d232
<       ecc_bk = -1
295c312
<      &        rm,lum,kstar(k),mc,rc,me,re,k2,fbfac,fbtot,mco,ecs)
---
>      &               rm,lum,kstar(k),mc,rc,me,re,k2)
343,355c360,372
< *      ip = 0
<       jp = 0
< *      tsave = tphys
< *      isave = .true.
< *      iplot = .false.
< *      if(dtp.le.0.d0)then
< *         iplot = .true.
< *         isave = .false.
< *         tsave = tphysf
< *      elseif(dtp.gt.tphysf)then
< *         isave = .false.
< *         tsave = tphysf
< *      endif
---
> c      ip = 0
> c      jp = 0
> c      tsave = tphys
> c      isave = .true.
> c      iplot = .false.
> c      if(dtp.le.0.d0)then
> c         iplot = .true.
> c         isave = .false.
> c         tsave = tphysf
> c      elseif(dtp.gt.tphysf)then
> c         isave = .false.
> c         tsave = tphysf
> c      endif
418,438c435,480
<                jp = MIN(jpmax,jp + 1)
<                bpp(jp,1) = tphys
<                bpp(jp,2) = mass(1)
<                bpp(jp,3) = mass(2)
<                bpp(jp,4) = float(kstar(1))
<                bpp(jp,5) = float(kstar(2))
<                bpp(jp,6) = sep
<                bpp(jp,7) = ecc
<                bpp(jp,8) = rad(1)/rol(1)
<                bpp(jp,9) = rad(2)/rol(2)
<                if(bsymb)then
< *                  btype = 7
< *                  bpp(jp,10) = 13.0
<                   bpp(jp,10) = 7.0
<                   esymb = .true.
<                else
< *                  btype = 6
< *                  bpp(jp,10) = 12.0
<                   bpp(jp,10) = 6.0
<                   bsymb = .true.
<                endif
---
> c                jp = MIN(200,jp + 1)
> c                bpp(jp,1) = tphys
> c                bpp(jp,2) = float(kstar(1))
> c                bpp(jp,3) = mass0(1)
> c                bpp(jp,4) = mass(1)
> c                bpp(jp,5) = log10(lumin(1))
> c                bpp(jp,6) = log10(rad(1))
> c                teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                              (rad(1)**2.d0))**(1.d0/4.d0))
> c                bpp(jp,7) = log10(teff1)
> c                bpp(jp,8) = massc(1)
> c                bpp(jp,9) = radc(1)
> c                bpp(jp,10) = menv(1)
> c                bpp(jp,11) = renv(1)
> c                bpp(jp,12) = epoch(1)
> c                bpp(jp,13) = ospin(1)
> c                bpp(jp,14) = dmt(1) - dmr(1)
> c                bpp(jp,15) = rad(1)/rol(1)
> c                bpp(jp,16) = float(kstar(2))
> c                bpp(jp,17) = mass0(2)
> c                bpp(jp,18) = mass(2)
> c                bpp(jp,19) = log10(lumin(2))
> c                bpp(jp,20) = log10(rad(2))
> c                teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                               (rad(2)**2.d0))**(1.d0/4.d0))
> c                bpp(jp,21) = log10(teff2)
> c                bpp(jp,22) = massc(2)
> c                bpp(jp,23) = radc(2)
> c                bpp(jp,24) = menv(2)
> c                bpp(jp,25) = renv(2)
> c                bpp(jp,26) = epoch(2)
> c                bpp(jp,27) = ospin(2)
> c                bpp(jp,28) = dmt(2) - dmr(2)
> c                bpp(jp,29) = rad(2)/rol(2)
> c                bpp(jp,30) = tb
> c                bpp(jp,31) = sep
> c                bpp(jp,32) = ecc
>                 if(bsymb)then
>                     btype = 7
> c                    bpp(jp,33) = 13.0
>                     esymb = .true.
>                 else
>                     btype = 6
> c                    bpp(jp,33) = 12.0
>                     bsymb = .true.
>                 endif
456,459c498,499
< *
< * Always calculate GR, otherwise massive BHs miss GR effect
< *         if(sep.le.10.d0)then
<          if(sep.gt.0.d0) then
---
> * GWs are important only for compact objects
>       if((kstar(1).ge.10 .and. kstar(2).ge.10).and.sep.gt.0.D0)then
532c572
<                   f = MIN(1.d0,(ttid/(2.d0*tc)**2))
---
> *                  f = MIN(1.d0,(ttid/(2.d0*tc)**2))
600a641
> *
729,732c770,775
< *        if(mt.gt.100.d0)then
< *           WRITE(99,*)' MASS EXCEEDED ',mass1i,mass2i,tbi,ecci,mt
< *           goto 140
< *        endif
---
> c         if(mt.gt.300.d0.and.saveflag.eqv..true.)then
> c            WRITE(99,*)' MASS EXCEEDED in evolv3.f',mass1i,mass2i,
> c     &                 tbi,ecci,mt
> c            saveflag = .false.
> c            goto 150
> c         endif
736c779,786
<      &        rm,lum,kw,mc,rc,me,re,k2,fbfac,fbtot,mco,ecs)
---
>      &               rm,lum,kw,mc,rc,me,re,k2)
> *
> * if PISN occurs 
>          if(kw.eq.15)then
>             kstar(k)= kw
>             sgl = .true.
>             goto 135
>          endif
745c795
<      &      (kw.ge.10.and.kw.le.14))then
---
>      &      (kw.eq.13.or.kw.eq.14))then
748c798
<      &              vkick(4*(k-1)+1),fbfac,fbtot,mco,ecs)
---
>      &          vkick(4*(k-1)+1))
751c801
<      &              vkick(4*(k-1)+1),fbfac,fbtot,mco,ecs)
---
>      &          vkick(4*(k-1)+1))
797c847
< *     Base new time scale for changes in radius & mass on stellar type.
---
> * Base new time scale for changes in radius & mass on stellar type.
824,836c874,912
<             jp = MIN(jpmax,jp + 1)
<             bpp(jp,1) = tphys
<             bpp(jp,2) = mass(1)
<             bpp(jp,3) = mass(2)
<             bpp(jp,4) = float(kstar(1))
<             bpp(jp,5) = float(kstar(2))
<             bpp(jp,6) = sep
<             bpp(jp,7) = ecc
<             bpp(jp,8) = rad(1)/rol(1)
<             bpp(jp,9) = rad(2)/rol(2)
< *            bpp(jp,10) = 14.0
<             bpp(jp,10) = 11.0
< *            btype = 11
---
> c            jp = MIN(200,jp + 1)
> c            bpp(jp,1) = tphys
> c            bpp(jp,2) = float(kstar(1))
> c            bpp(jp,3) = mass0(1)
> c            bpp(jp,4) = mass(1)
> c            bpp(jp,5) = log10(lumin(1))
> c            bpp(jp,6) = log10(rad(1))
> c            teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                          (rad(1)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,7) = log10(teff1)
> c            bpp(jp,8) = massc(1)
> c            bpp(jp,9) = radc(1)
> c            bpp(jp,10) = menv(1)
> c            bpp(jp,11) = renv(1)
> c            bpp(jp,12) = epoch(1)
> c            bpp(jp,13) = ospin(1)
> c            bpp(jp,14) = dmt(1) - dmr(1)
> c            bpp(jp,15) = rad(1)/rol(1)
> c            bpp(jp,16) = float(kstar(2))
> c            bpp(jp,17) = mass0(2)
> c            bpp(jp,18) = mass(2)
> c            bpp(jp,19) = log10(lumin(2))
> c            bpp(jp,20) = log10(rad(2))
> c            teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                          (rad(2)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,21) = log10(teff2)
> c            bpp(jp,22) = massc(2)
> c            bpp(jp,23) = radc(2)
> c            bpp(jp,24) = menv(2)
> c            bpp(jp,25) = renv(2)
> c            bpp(jp,26) = epoch(2)
> c            bpp(jp,27) = ospin(2)
> c            bpp(jp,28) = dmt(2) - dmr(2)
> c            bpp(jp,29) = rad(2)/rol(2)
> c            bpp(jp,30) = tb
> c            bpp(jp,31) = sep
> c            bpp(jp,32) = ecc
> c            bpp(jp,33) = 14.0
>              btype = 11
866,877c942,980
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
<          bpp(jp,3) = mass(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          bpp(jp,8) = rad(1)/rol(1)
<          bpp(jp,9) = rad(2)/rol(2)
<          bpp(jp,10) = 1.0
< *         btype = 1
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                    (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = rad(1)/rol(1)
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,29) = rad(2)/rol(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 1.0
>          btype = 1
879,880c982,983
<             bpp(jp,10) = 2.0
< *            btype = 2
---
> c            bpp(jp,33) = 2.0
>             btype = 2
900,942c1003,1051
< *      if((isave.and.tphys.ge.tsave).or.iplot)then
< *         if(sgl.or.(rad(1).lt.rol(1).and.rad(2).lt.rol(2)).
< *     &      or.tphys.lt.tiny)then
< *            ip = ip + 1
< *            bcm(ip,1) = tphys
< *            bcm(ip,2) = float(kstar(1))
< *            bcm(ip,3) = mass0(1)
< *            bcm(ip,4) = mass(1)
< *            bcm(ip,5) = log10(lumin(1))
< *            bcm(ip,6) = log10(rad(1))
< *            teff1 = 1000.d0*((1130.d0*lumin(1)/
< *     &                       (rad(1)**2.d0))**(1.d0/4.d0))
< *            bcm(ip,7) = log10(teff1)
< *            bcm(ip,8) = massc(1)
< *            bcm(ip,9) = radc(1)
< *            bcm(ip,10) = menv(1)
< *            bcm(ip,11) = renv(1)
< *            bcm(ip,12) = epoch(1)
< *            bcm(ip,13) = ospin(1)
< *            bcm(ip,14) = dmt(1) - dmr(1)
< *            bcm(ip,15) = rad(1)/rol(1)
< *            bcm(ip,16) = float(kstar(2))
< *            bcm(ip,17) = mass0(2)
< *            bcm(ip,18) = mass(2)
< *            bcm(ip,19) = log10(lumin(2))
< *            bcm(ip,20) = log10(rad(2))
< *            teff2 = 1000.d0*((1130.d0*lumin(2)/
< *     &                       (rad(2)**2.d0))**(1.d0/4.d0))
< *            bcm(ip,21) = log10(teff2)
< *            bcm(ip,22) = massc(2)
< *            bcm(ip,23) = radc(2)
< *            bcm(ip,24) = menv(2)
< *            bcm(ip,25) = renv(2)
< *            bcm(ip,26) = epoch(2)
< *            bcm(ip,27) = ospin(2)
< *            bcm(ip,28) = dmt(2) - dmr(2)
< *            bcm(ip,29) = rad(2)/rol(2)
< *            bcm(ip,30) = tb
< *            bcm(ip,31) = sep
< *            bcm(ip,32) = ecc
< *            if(isave) tsave = tsave + dtp
< *         endif
< *      endif
---
> c      if((isave.and.tphys.ge.tsave).or.iplot)then
> c         if(sgl.or.(rad(1).lt.rol(1).and.rad(2).lt.rol(2)).
> c     &      or.tphys.lt.tiny)then
> c            ip = ip + 1
> c            if(ip.gt.50000)then
> c               WRITE(99,*)' EVOLV3 ARRAY ERROR bcm ',mass1i,mass2i,tbi,
> c     &           ecci
> c               saveflag = .false.
> c               goto 150
> c            endif
> c            bcm(ip,1) = tphys
> c            bcm(ip,2) = float(kstar(1))
> c            bcm(ip,3) = mass0(1)
> c            bcm(ip,4) = mass(1)
> c            bcm(ip,5) = log10(lumin(1))
> c            bcm(ip,6) = log10(rad(1))
> c            teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                       (rad(1)**2.d0))**(1.d0/4.d0))
> c            bcm(ip,7) = log10(teff1)
> c            bcm(ip,8) = massc(1)
> c            bcm(ip,9) = radc(1)
> c            bcm(ip,10) = menv(1)
> c            bcm(ip,11) = renv(1)
> c            bcm(ip,12) = epoch(1)
> c            bcm(ip,13) = ospin(1)
> c            bcm(ip,14) = dmt(1) - dmr(1)
> c            bcm(ip,15) = rad(1)/rol(1)
> c            bcm(ip,16) = float(kstar(2))
> c            bcm(ip,17) = mass0(2)
> c            bcm(ip,18) = mass(2)
> c            bcm(ip,19) = log10(lumin(2))
> c            bcm(ip,20) = log10(rad(2))
> c            teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                       (rad(2)**2.d0))**(1.d0/4.d0))
> c            bcm(ip,21) = log10(teff2)
> c            bcm(ip,22) = massc(2)
> c            bcm(ip,23) = radc(2)
> c            bcm(ip,24) = menv(2)
> c            bcm(ip,25) = renv(2)
> c            bcm(ip,26) = epoch(2)
> c            bcm(ip,27) = ospin(2)
> c            bcm(ip,28) = dmt(2) - dmr(2)
> c            bcm(ip,29) = rad(2)/rol(2)
> c            bcm(ip,30) = tb
> c            bcm(ip,31) = sep
> c            bcm(ip,32) = ecc
> c            if(isave) tsave = tsave + dtp
> c         endif
> c      endif
950a1060
> *
1043a1154
> *
1047,1058c1158,1196
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
<          bpp(jp,3) = mass(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          bpp(jp,8) = rad(1)/rol(1)
<          bpp(jp,9) = rad(2)/rol(2)
<          bpp(jp,10) = 2.0
< *         btype = 2
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                        (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = rad(1)/rol(1)
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,29) = rad(2)/rol(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 2.0
>           btype = 2
1089,1100c1227,1265
<       jp = MIN(jpmax,jp + 1)
<       bpp(jp,1) = tphys
<       bpp(jp,2) = mass(1)
<       bpp(jp,3) = mass(2)
<       bpp(jp,4) = float(kstar(1))
<       bpp(jp,5) = float(kstar(2))
<       bpp(jp,6) = sep
<       bpp(jp,7) = ecc
<       bpp(jp,8) = rad(1)/rol(1)
<       bpp(jp,9) = rad(2)/rol(2)
<       bpp(jp,10) = 3.0
< *      btype = 3
---
> c      jp = MIN(200,jp + 1)
> c      bpp(jp,1) = tphys
> c      bpp(jp,2) = float(kstar(1))
> c      bpp(jp,3) = mass0(1)
> c      bpp(jp,4) = mass(1)
> c      bpp(jp,5) = log10(lumin(1))
> c      bpp(jp,6) = log10(rad(1))
> c      teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                   (rad(1)**2.d0))**(1.d0/4.d0))
> c      bpp(jp,7) = log10(teff1)
> c      bpp(jp,8) = massc(1)
> c      bpp(jp,9) = radc(1)
> c      bpp(jp,10) = menv(1)
> c      bpp(jp,11) = renv(1)
> c      bpp(jp,12) = epoch(1)
> c      bpp(jp,13) = ospin(1)
> c      bpp(jp,14) = dmt(1) - dmr(1)
> c      bpp(jp,15) = rad(1)/rol(1)
> c      bpp(jp,16) = float(kstar(2))
> c      bpp(jp,17) = mass0(2)
> c      bpp(jp,18) = mass(2)
> c      bpp(jp,19) = log10(lumin(2))
> c      bpp(jp,20) = log10(rad(2))
> c      teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c      bpp(jp,21) = log10(teff2)
> c      bpp(jp,22) = massc(2)
> c      bpp(jp,23) = radc(2)
> c      bpp(jp,24) = menv(2)
> c      bpp(jp,25) = renv(2)
> c      bpp(jp,26) = epoch(2)
> c      bpp(jp,27) = ospin(2)
> c      bpp(jp,28) = dmt(2) - dmr(2)
> c      bpp(jp,29) = rad(2)/rol(2)
> c      bpp(jp,30) = tb
> c      bpp(jp,31) = sep
> c      bpp(jp,32) = ecc
> c      bpp(jp,33) = 3.0
>        btype = 3
1115,1153c1280,1323
< *      if(iplot.and.tphys.gt.tiny)then
< *         ip = ip + 1
< *         bcm(ip,1) = tphys
< *         bcm(ip,2) = float(kstar(1))
< *         bcm(ip,3) = mass0(1)
< *         bcm(ip,4) = mass(1)
< *         bcm(ip,5) = log10(lumin(1))
< *         bcm(ip,6) = log10(rad(1))
< *         teff1 = 1000.d0*((1130.d0*lumin(1)/
< *     &                    (rad(1)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,7) = log10(teff1)
< *         bcm(ip,8) = massc(1)
< *         bcm(ip,9) = radc(1)
< *         bcm(ip,10) = menv(1)
< *         bcm(ip,11) = renv(1)
< *         bcm(ip,12) = epoch(1)
< *         bcm(ip,13) = ospin(1)
< *         bcm(ip,14) = 0.0
< *         bcm(ip,15) = rad(1)/rol(1)
< *         bcm(ip,16) = float(kstar(2))
< *         bcm(ip,17) = mass0(2)
< *         bcm(ip,18) = mass(2)
< *         bcm(ip,19) = log10(lumin(2))
< *         bcm(ip,20) = log10(rad(2))
< *         teff2 = 1000.d0*((1130.d0*lumin(2)/
< *     &                    (rad(2)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,21) = log10(teff2)
< *         bcm(ip,22) = massc(2)
< *         bcm(ip,23) = radc(2)
< *         bcm(ip,24) = menv(2)
< *         bcm(ip,25) = renv(2)
< *         bcm(ip,26) = epoch(2)
< *         bcm(ip,27) = ospin(2)
< *         bcm(ip,28) = 0.0
< *         bcm(ip,29) = rad(2)/rol(2)
< *         bcm(ip,30) = tb
< *         bcm(ip,31) = sep
< *         bcm(ip,32) = ecc
< *      endif
---
> c      if(iplot.and.tphys.gt.tiny)then
> c         ip = ip + 1
> c         if(ip.gt.50000)then
> c            WRITE(99,*)' EVOLV3 ARRAY ERROR bcm ',mass1i,mass2i,tbi,ecci
> c            saveflag = .false.
> c            goto 150
> c         endif
> c         bcm(ip,1) = tphys
> c         bcm(ip,2) = float(kstar(1))
> c         bcm(ip,3) = mass0(1)
> c         bcm(ip,4) = mass(1)
> c         bcm(ip,5) = log10(lumin(1))
> c         bcm(ip,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                    (rad(1)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,7) = log10(teff1)
> c         bcm(ip,8) = massc(1)
> c         bcm(ip,9) = radc(1)
> c         bcm(ip,10) = menv(1)
> c         bcm(ip,11) = renv(1)
> c         bcm(ip,12) = epoch(1)
> c         bcm(ip,13) = ospin(1)
> c         bcm(ip,14) = 0.0
> c         bcm(ip,15) = rad(1)/rol(1)
> c         bcm(ip,16) = float(kstar(2))
> c         bcm(ip,17) = mass0(2)
> c         bcm(ip,18) = mass(2)
> c         bcm(ip,19) = log10(lumin(2))
> c         bcm(ip,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,21) = log10(teff2)
> c         bcm(ip,22) = massc(2)
> c         bcm(ip,23) = radc(2)
> c         bcm(ip,24) = menv(2)
> c         bcm(ip,25) = renv(2)
> c         bcm(ip,26) = epoch(2)
> c         bcm(ip,27) = ospin(2)
> c         bcm(ip,28) = 0.0
> c         bcm(ip,29) = rad(2)/rol(2)
> c         bcm(ip,30) = tb
> c         bcm(ip,31) = sep
> c         bcm(ip,32) = ecc
> c      endif
1289a1460,1486
> ****
> * The following allows us to merge HG donors as if 
> * they were MS stars...
> *
> * Allow the stars to merge with the product in *1.
> *
>          if((kstar(j1).eq.2).and.(q(j1).gt.qc)) then
>             m1ce = mass(j1)
>             m2ce = mass(j2)
> * We need the donor in the first place of the array
>             helper(1) = j1
>             helper(2) = j2
>             CALL mix(mass0,mass,aj,kstar,zpars,helper)
> * we return to the usual way
>             dm1 = m1ce - mass(j1)
>             dm2 = mass(j2) - m2ce
> *
> * Next step should be made without changing the time.
> *
>             dtm = 0.d0
>             epoch(1) = tphys - aj(1)
>             coel = .true.
>             goto 135
> *
>          endif
> *
> ****
1300,1314c1497,1537
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
< *         if(kstar(1).eq.15) bpp(jp,2) = mass0(1)
<          bpp(jp,3) = mass(2)
< *         if(kstar(2).eq.15) bpp(jp,3) = mass0(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          bpp(jp,8) = rad(1)/rol(1)
<          bpp(jp,9) = rad(2)/rol(2)
< *         bpp(jp,10) = 7.0
<          bpp(jp,10) = 8.0
< *         btype = 8
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         if(kstar(1).eq.15) bpp(jp,4) = mass0(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                       (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = rad(1)/rol(1)
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         if(kstar(2).eq.15) bpp(jp,18) = mass0(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,29) = rad(2)/rol(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 7.0
>           btype = 8
1407c1630,1634
<          kstar(j2) = 14
---
>          if(mass(j2).gt.mxns)then
>            kstar(j2) = 14
>          else
>            kstar(j2) = 13
>          endif
1462c1689,1696
<             CALL mix(mass0,mass,aj,kstar,zpars)
---
> ***
> * Beacuse the collisional matrix is not symmetric 
>             helper(1) = j1
>             helper(2) = j2
>             CALL mix(mass0,mass,aj,kstar,zpars,helper)
> * we return to the usual way
> *
> ***
1493a1728
> *
1550,1568c1785,1829
<                   jp = MIN(80,jp + 1)
<                   bpp(jp,1) = tphys
<                   bpp(jp,2) = mass(j1)
<                   bpp(jp,3) = mt2
<                   bpp(jp,4) = float(kstar(j1))
<                   bpp(jp,5) = float(kst)
<                   bpp(jp,6) = sep
<                   bpp(jp,7) = ecc
<                   bpp(jp,8) = rad(1)/rol(1)
<                   bpp(jp,9) = rad(2)/rol(2)
< *                  bpp(jp,10) = 8.0
<                   bpp(jp,10) = 9.0
< *                 btype = 9
<                   if(j1.eq.2)then
<                      bpp(jp,2) = mt2
<                      bpp(jp,3) = mass(j1)
<                      bpp(jp,4) = float(kst)
<                      bpp(jp,5) = float(kstar(j1))
<                   endif
---
> c                  jp = MIN(200,jp + 1)
> c                  bpp(jp,1) = tphys
> c                  bpp(jp,2) = float(kstar(j1))
> c                  bpp(jp,3) = mass0(1)
> c                  bpp(jp,4) = mass(j1)
> c                  bpp(jp,5) = log10(lumin(1))
> c                  bpp(jp,6) = log10(rad(1))
> c                  teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                                (rad(1)**2.d0))**(1.d0/4.d0))
> c                  bpp(jp,7) = log10(teff1)
> c                  bpp(jp,8) = massc(1)
> c                  bpp(jp,9) = radc(1)
> c                  bpp(jp,10) = menv(1)
> c                  bpp(jp,11) = renv(1)
> c                  bpp(jp,12) = epoch(1)
> c                  bpp(jp,13) = ospin(1)
> c                  bpp(jp,14) = dmt(1) - dmr(1)
> c                  bpp(jp,15) = rad(1)/rol(1)
> c                  bpp(jp,16) = float(kst)
> c                  bpp(jp,17) = mass0(2)
> c                  bpp(jp,18) = mt2
> c                  bpp(jp,19) = log10(lumin(2))
> c                  bpp(jp,20) = log10(rad(2))
> c                  teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                                 (rad(2)**2.d0))**(1.d0/4.d0))
> c                  bpp(jp,21) = log10(teff2)
> c                  bpp(jp,22) = massc(2)
> c                  bpp(jp,23) = radc(2)
> c                  bpp(jp,24) = menv(2)
> c                  bpp(jp,25) = renv(2)
> c                  bpp(jp,26) = epoch(2)
> c                  bpp(jp,27) = ospin(2)
> c                  bpp(jp,28) = dmt(2) - dmr(2)
> c                  bpp(jp,29) = rad(2)/rol(2)
> c                  bpp(jp,30) = tb
> c                  bpp(jp,31) = sep
> c                  bpp(jp,32) = ecc
> c                  bpp(jp,33) = 8.0
>                   btype = 9
> c                  if(j1.eq.2)then
> c                     bpp(jp,4) = mt2
> c                     bpp(jp,18) = mass(j1)
> c                     bpp(jp,2) = float(kst)
> c                     bpp(jp,16) = float(kstar(j1))
> c                  endif
1609,1627c1870,1914
<                   jp = MIN(jpmax,jp + 1)
<                   bpp(jp,1) = tphys
<                   bpp(jp,2) = mass(j1)
<                   bpp(jp,3) = mt2
<                   bpp(jp,4) = float(kstar(j1))
<                   bpp(jp,5) = float(kst)
<                   bpp(jp,6) = sep
<                   bpp(jp,7) = ecc
<                   bpp(jp,8) = rad(1)/rol(1)
<                   bpp(jp,9) = rad(2)/rol(2)
< *                  bpp(jp,10) = 8.0
<                   bpp(jp,10) = 9.0
< *                  btype = 9
<                   if(j1.eq.2)then
<                      bpp(jp,2) = mt2
<                      bpp(jp,3) = mass(j1)
<                      bpp(jp,4) = float(kst)
<                      bpp(jp,5) = float(kstar(j1))
<                   endif
---
> c                  jp = MIN(200,jp + 1)
> c                  bpp(jp,1) = tphys
> c                  bpp(jp,2) = float(kstar(j1))
> c                  bpp(jp,3) = mass0(1)
> c                  bpp(jp,4) = mass(j1)
> c                  bpp(jp,5) = log10(lumin(1))
> c                  bpp(jp,6) = log10(rad(1))
> c                  teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                                 (rad(1)**2.d0))**(1.d0/4.d0))
> c                  bpp(jp,7) = log10(teff1)
> c                  bpp(jp,8) = massc(1)
> c                  bpp(jp,9) = radc(1)
> c                  bpp(jp,10) = menv(1)
> c                  bpp(jp,11) = renv(1)
> c                  bpp(jp,12) = epoch(1)
> c                  bpp(jp,13) = ospin(1)
> c                  bpp(jp,14) = dmt(1) - dmr(1)
> c                  bpp(jp,15) = rad(1)/rol(1)
> c                  bpp(jp,16) = float(kst)
> c                  bpp(jp,17) = mass0(2)
> c                  bpp(jp,18) = mt2
> c                  bpp(jp,19) = log10(lumin(2))
> c                  bpp(jp,20) = log10(rad(2))
> c                  teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                                 (rad(2)**2.d0))**(1.d0/4.d0))
> c                  bpp(jp,21) = log10(teff2)
> c                  bpp(jp,22) = massc(2)
> c                  bpp(jp,23) = radc(2)
> c                  bpp(jp,24) = menv(2)
> c                  bpp(jp,25) = renv(2)
> c                  bpp(jp,26) = epoch(2)
> c                  bpp(jp,27) = ospin(2)
> c                  bpp(jp,28) = dmt(2) - dmr(2)
> c                  bpp(jp,29) = rad(2)/rol(2)
> c                  bpp(jp,30) = tb
> c                  bpp(jp,31) = sep
> c                  bpp(jp,32) = ecc
> c                  bpp(jp,33) = 8.0
>                   btype = 8
> c                  if(j1.eq.2)then
> c                     bpp(jp,4) = mt2
> c                     bpp(jp,18) = mass(j1)
> c                     bpp(jp,2) = float(kst)
> c                     bpp(jp,16) = float(kstar(j1))
> c                  endif
1737,1738c2024,2026
< *
<          if(sep.le.10.d0)then
---
> * GW are important only for compact objects
> * 
>        if((kstar(1).ge.10 .and. kstar(2).ge.10).and.sep.gt.0.d0)then
1837c2125,2126
<                   f = MIN(1.d0,(ttid/(2.d0*tc)**2))
---
> *                  f = MIN(1.d0,(ttid/(2.d0*tc)**2))
>                   f = MIN(1.d0,(ttid/(2.d0*tc))**2)
1977,1980c2266,2271
< *        if(mt.gt.100.d0)then
< *           WRITE(99,*)' MASS EXCEEDED ',mass1i,mass2i,tbi,ecci,mt
< *           goto 140
< *        endif
---
> c         if(mt.gt.300.d0.and.saveflag.eqv..true.)then
> c            WRITE(99,*)' MASS EXCEEDED in evolv3.f',mass1i,mass2i,
> c     &                  tbi,ecci,mt
> c            saveflag = .false.
> c            goto 150
> c         endif
1984c2275,2282
<      &        rm,lum,kw,mc,rc,me,re,k2,fbfac,fbtot,mco,ecs)
---
>      &               rm,lum,kw,mc,rc,me,re,k2)
> *
> * if PISN occurs 
>          if(kw.eq.15)then
>             kstar(k)= kw
>             sgl = .true.
>             goto 135
>          endif
1989c2287
<      &      (kw.ge.10.and.kw.le.14))then
---
>      &      (kw.eq.13.or.kw.eq.14))then
1992c2290
<      &           vkick(4*(k-1)+1),fbfac,fbtot,mco,ecs)
---
>      &                vkick(4*(k-1)+1))
2047,2059c2345,2383
<             jp = MIN(jpmax,jp + 1)
<             bpp(jp,1) = tphys
<             bpp(jp,2) = mass(1)
<             bpp(jp,3) = mass(2)
<             bpp(jp,4) = float(kstar(1))
<             bpp(jp,5) = float(kstar(2))
<             bpp(jp,6) = sep
<             bpp(jp,7) = ecc
<             bpp(jp,8) = rad(1)/rol(1)
<             bpp(jp,9) = rad(2)/rol(2)
< *            bpp(jp,10) = 14.0
<             bpp(jp,10) = 11.0
< *            btype = 11
---
> c            jp = MIN(200,jp + 1)
> c            bpp(jp,1) = tphys
> c            bpp(jp,2) = float(kstar(1))
> c            bpp(jp,3) = mass0(1)
> c            bpp(jp,4) = mass(1)
> c            bpp(jp,5) = log10(lumin(1))
> c            bpp(jp,6) = log10(rad(1))
> c            teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                           (rad(1)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,7) = log10(teff1)
> c            bpp(jp,8) = massc(1)
> c            bpp(jp,9) = radc(1)
> c            bpp(jp,10) = menv(1)
> c            bpp(jp,11) = renv(1)
> c            bpp(jp,12) = epoch(1)
> c            bpp(jp,13) = ospin(1)
> c            bpp(jp,14) = dmt(1) - dmr(1)
> c            bpp(jp,15) = rad(1)/rol(1)
> c            bpp(jp,16) = float(kstar(2))
> c            bpp(jp,17) = mass0(2)
> c            bpp(jp,18) = mass(2)
> c            bpp(jp,19) = log10(lumin(2))
> c            bpp(jp,20) = log10(rad(2))
> c            teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                           (rad(2)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,21) = log10(teff2)
> c            bpp(jp,22) = massc(2)
> c            bpp(jp,23) = radc(2)
> c            bpp(jp,24) = menv(2)
> c            bpp(jp,25) = renv(2)
> c            bpp(jp,26) = epoch(2)
> c            bpp(jp,27) = ospin(2)
> c            bpp(jp,28) = dmt(2) - dmr(2)
> c            bpp(jp,29) = rad(2)/rol(2)
> c            bpp(jp,30) = tb
> c            bpp(jp,31) = sep
> c            bpp(jp,32) = ecc
> c            bpp(jp,33) = 14.0
>              btype = 11
2087,2132c2411,2461
< *      if((isave.and.tphys.ge.tsave).or.iplot)then
< *         ip = ip + 1
< *         bcm(ip,1) = tphys
< *         bcm(ip,2) = float(kstar(1))
< *         bcm(ip,3) = mass0(1)
< *         bcm(ip,4) = mass(1)
< *         bcm(ip,5) = log10(lumin(1))
< *         bcm(ip,6) = log10(rad(1))
< *         teff1 = 1000.d0*((1130.d0*lumin(1)/
< *     &                    (rad(1)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,7) = log10(teff1)
< *         bcm(ip,8) = massc(1)
< *         bcm(ip,9) = radc(1)
< *         bcm(ip,10) = menv(1)
< *         bcm(ip,11) = renv(1)
< *         bcm(ip,12) = epoch(1)
< *         bcm(ip,13) = ospin(1)
< *         bcm(ip,15) = rad(1)/rol(1)
< *         bcm(ip,16) = float(kstar(2))
< *         bcm(ip,17) = mass0(2)
< *         bcm(ip,18) = mass(2)
< *         bcm(ip,19) = log10(lumin(2))
< *         bcm(ip,20) = log10(rad(2))
< *         teff2 = 1000.d0*((1130.d0*lumin(2)/
< *     &                    (rad(2)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,21) = log10(teff2)
< *         bcm(ip,22) = massc(2)
< *         bcm(ip,23) = radc(2)
< *         bcm(ip,24) = menv(2)
< *         bcm(ip,25) = renv(2)
< *         bcm(ip,26) = epoch(2)
< *         bcm(ip,27) = ospin(2)
< *         bcm(ip,29) = rad(2)/rol(2)
< *         bcm(ip,30) = tb
< *         bcm(ip,31) = sep
< *         bcm(ip,32) = ecc
< *         dt = MAX(dtm,1.0d-12)*1.0d+06
< *         if(j1.eq.1)then
< *            bcm(ip,14) = (-1.0*dm1 - dms(1))/dt
< *            bcm(ip,28) = (dm2 - dms(2))/dt
< *         else
< *            bcm(ip,14) = (dm2 - dms(1))/dt
< *            bcm(ip,28) = (-1.0*dm1 - dms(2))/dt
< *         endif
< *         if(isave) tsave = tsave + dtp
< *      endif
---
> c      if((isave.and.tphys.ge.tsave).or.iplot)then
> c         ip = ip + 1
> c         if(ip.gt.50000)then
> c           WRITE(99,*)' EVOLV3 ARRAY ERROR bcm ',mass1i,mass2i,tbi,ecci
> c           saveflag = .false.
> c           goto 150
> c         endif
> c         bcm(ip,1) = tphys
> c         bcm(ip,2) = float(kstar(1))
> c         bcm(ip,3) = mass0(1)
> c         bcm(ip,4) = mass(1)
> c         bcm(ip,5) = log10(lumin(1))
> c         bcm(ip,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                    (rad(1)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,7) = log10(teff1)
> c         bcm(ip,8) = massc(1)
> c         bcm(ip,9) = radc(1)
> c         bcm(ip,10) = menv(1)
> c         bcm(ip,11) = renv(1)
> c         bcm(ip,12) = epoch(1)
> c         bcm(ip,13) = ospin(1)
> c         bcm(ip,15) = rad(1)/rol(1)
> c         bcm(ip,16) = float(kstar(2))
> c         bcm(ip,17) = mass0(2)
> c         bcm(ip,18) = mass(2)
> c         bcm(ip,19) = log10(lumin(2))
> c         bcm(ip,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,21) = log10(teff2)
> c         bcm(ip,22) = massc(2)
> c         bcm(ip,23) = radc(2)
> c         bcm(ip,24) = menv(2)
> c         bcm(ip,25) = renv(2)
> c         bcm(ip,26) = epoch(2)
> c         bcm(ip,27) = ospin(2)
> c         bcm(ip,29) = rad(2)/rol(2)
> c         bcm(ip,30) = tb
> c         bcm(ip,31) = sep
> c         bcm(ip,32) = ecc
> c         dt = MAX(dtm,1.0d-12)*1.0d+06
> c         if(j1.eq.1)then
> c            bcm(ip,14) = (-1.0*dm1 - dms(1))/dt
> c            bcm(ip,28) = (dm2 - dms(2))/dt
> c         else
> c            bcm(ip,14) = (dm2 - dms(1))/dt
> c            bcm(ip,28) = (-1.0*dm1 - dms(2))/dt
> c         endif
> c         if(isave) tsave = tsave + dtp
> c      endif
2138,2149c2467,2505
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
<          bpp(jp,3) = mass(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          bpp(jp,8) = rad(1)/rol(1)
<          bpp(jp,9) = rad(2)/rol(2)
<          bpp(jp,10) = 2.0
< *         btype = 2
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                        (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = rad(1)/rol(1)
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,29) = rad(2)/rol(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 2.0
>           btype = 2
2162,2173c2518,2556
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
<          bpp(jp,3) = mass(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          bpp(jp,8) = rad(1)/rol(1)
<          bpp(jp,9) = rad(2)/rol(2)
<          bpp(jp,10) = 4.0
< *         btype = 4
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                        (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = rad(1)/rol(1)
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,29) = rad(2)/rol(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 4.0
>          btype = 4
2176a2560
> 
2191,2202c2575,2616
<       jp = MIN(jpmax,jp + 1)
<       bpp(jp,1) = tphys
<       bpp(jp,2) = mass(1)
<       bpp(jp,3) = mass(2)
<       bpp(jp,4) = float(kstar(1))
<       bpp(jp,5) = float(kstar(2))
<       bpp(jp,6) = sep
<       bpp(jp,7) = ecc
<       bpp(jp,8) = rrl1
<       bpp(jp,9) = rrl2
<       bpp(jp,10) = 5.0
< *      btype = 5
---
> c      jp = MIN(200,jp + 1)
> c      bpp(jp,1) = tphys
> c      bpp(jp,2) = float(kstar(1))
> c      bpp(jp,3) = mass0(1)
> c      bpp(jp,4) = mass(1)
> c      bpp(jp,5) = log10(lumin(1))
> c      bpp(jp,6) = log10(rad(1))
> c      teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                    (rad(1)**2.d0))**(1.d0/4.d0))
> c      bpp(jp,7) = log10(teff1)
> c      bpp(jp,8) = massc(1)
> c      bpp(jp,9) = radc(1)
> c      bpp(jp,10) = menv(1)
> c      bpp(jp,11) = renv(1)
> c      bpp(jp,12) = epoch(1)
> c      bpp(jp,13) = ospin(1)
> c      bpp(jp,14) = dmt(1) - dmr(1)
> c      bpp(jp,15) = rrl1
> c      bpp(jp,16) = float(kstar(2))
> c      bpp(jp,17) = mass0(2)
> c      bpp(jp,18) = mass(2)
> c      bpp(jp,19) = log10(lumin(2))
> c      bpp(jp,20) = log10(rad(2))
> c      teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c      bpp(jp,21) = log10(teff2)
> c      bpp(jp,22) = massc(2)
> c      bpp(jp,23) = radc(2)
> c      bpp(jp,24) = menv(2)
> c      bpp(jp,25) = renv(2)
> c      bpp(jp,26) = epoch(2)
> c      bpp(jp,27) = ospin(2)
> c      bpp(jp,28) = dmt(2) - dmr(2)
> c      bpp(jp,29) = rrl2
> c      bpp(jp,30) = tb
> c      bpp(jp,31) = sep
> c      bpp(jp,32) = ecc
> c      bpp(jp,33) = 5.0
>        btype = 5
> *
> ***
> * HG donors behave like MS stars
2204c2618
<       if(kstar(j1).ge.2.and.kstar(j1).le.9.and.kstar(j1).ne.7)then
---
>       if(kstar(j1).ge.3.and.kstar(j1).le.9.and.kstar(j1).ne.7)then
2207,2208c2621
<      &               jspin(j2),kstar(j2),zpars,ecc,sep,jorb,
<      &               vkick(4*(j1-1)+1),vkick(4*(j2-1)+1),coel)
---
>      &               jspin(j2),kstar(j2),zpars,ecc,sep,jorb,coel)
2210c2623
<       elseif(kstar(j2).ge.2.and.kstar(j2).le.9.and.kstar(j2).ne.7)then
---
>       elseif(kstar(j2).ge.3.and.kstar(j2).le.9.and.kstar(j2).ne.7)then
2213,2214c2626
<      &               jspin(j1),kstar(j1),zpars,ecc,sep,jorb,
<      &               vkick(4*(j2-1)+1),vkick(4*(j1-1)+1),coel)
---
>      &               jspin(j1),kstar(j1),zpars,ecc,sep,jorb,coel)
2217c2629,2636
<          CALL mix(mass0,mass,aj,kstar,zpars)
---
> *
> * beacuse the collisional matrix is not symmetric 
>             helper(1) = j1
>             helper(2) = j2
>             CALL mix(mass0,mass,aj,kstar,zpars,helper)
> * we return to the usual way
> *
> ***
2220,2235c2639,2681
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
<          if(kstar(1).eq.15) bpp(jp,2) = mass0(1)
<          bpp(jp,3) = mass(2)
<          if(kstar(2).eq.15) bpp(jp,3) = mass0(2)
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = sep
<          bpp(jp,7) = ecc
<          rrl1 = MIN(rrl1,0.99d0)
<          rrl2 = MIN(rrl2,0.99d0)
<          bpp(jp,8) = rrl1
<          bpp(jp,9) = rrl2
<          bpp(jp,10) = 7.0
< *         btype = 8
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         if(kstar(1).eq.15) bpp(jp,4) = mass0(1)
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                        (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         rrl1 = MIN(rrl1,0.99d0)
> c         bpp(jp,15) = rrl1
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         if(kstar(2).eq.15) bpp(jp,18) = mass0(2)
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         rrl2 = MIN(rrl2,0.99d0)
> c         bpp(jp,29) = rrl2
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = sep
> c         bpp(jp,32) = ecc
> c         bpp(jp,33) = 7.0
>          btype = 8
2270,2281c2716,2754
<             jp = MIN(jpmax,jp + 1)
<             bpp(jp,1) = tphys
<             bpp(jp,2) = mass(1)
< *            if(kstar(1).eq.15) bpp(jp,2) = mass0(1)
<             bpp(jp,3) = mass(2)
< *            if(kstar(2).eq.15) bpp(jp,3) = mass0(2)
<             bpp(jp,4) = float(kstar(1))
<             bpp(jp,5) = float(kstar(2))
<             bpp(jp,6) = zero
<             bpp(jp,7) = zero
<             bpp(jp,8) = zero
<             bpp(jp,9) = ngtv
---
> c            jp = MIN(200,jp + 1)
> c            bpp(jp,1) = tphys
> c            bpp(jp,2) = float(kstar(1))
> c            bpp(jp,3) = mass0(1)
> c            bpp(jp,4) = mass(1)
> c            if(kstar(1).eq.15) bpp(jp,4) = mass0(1)
> c            bpp(jp,5) = log10(lumin(1))
> c            bpp(jp,6) = log10(rad(1))
> c            teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                           (rad(1)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,7) = log10(teff1)
> c            bpp(jp,8) = massc(1)
> c            bpp(jp,9) = radc(1)
> c            bpp(jp,10) = menv(1)
> c            bpp(jp,11) = renv(1)
> c            bpp(jp,12) = epoch(1)
> c            bpp(jp,13) = ospin(1)
> c            bpp(jp,14) = dmt(1) - dmr(1)
> c            bpp(jp,15) = zero
> c            bpp(jp,16) = float(kstar(2))
> c            bpp(jp,17) = mass0(2)
> c            bpp(jp,18) = mass(2)
> c            if(kstar(2).eq.15) bpp(jp,18) = mass0(2)
> c            bpp(jp,19) = log10(lumin(2))
> c            bpp(jp,20) = log10(rad(2))
> c            teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                           (rad(2)**2.d0))**(1.d0/4.d0))
> c            bpp(jp,21) = log10(teff2)
> c            bpp(jp,22) = massc(2)
> c            bpp(jp,23) = radc(2)
> c            bpp(jp,24) = menv(2)
> c            bpp(jp,25) = renv(2)
> c            bpp(jp,26) = epoch(2)
> c            bpp(jp,27) = ospin(2)
> c            bpp(jp,28) = dmt(2) - dmr(2)
> c            bpp(jp,29) = ngtv
> c            bpp(jp,30) = tb
> c            bpp(jp,31) = zero
> c            bpp(jp,32) = zero
2283,2285c2756,2757
< *               bpp(jp,10) = 6.0
<                bpp(jp,10) = 10.0
< *               btype = 10
---
> c               bpp(jp,33) = 6.0
>                btype = 10
2290,2295c2762,2766
<                bpp(jp,6) = sep
<                bpp(jp,7) = ecc
<                bpp(jp,9) = ngtv2
< *               bpp(jp,10) = 11.0
<                bpp(jp,10) = 13.0
< *               btype = 13
---
> c               bpp(jp,31) = sep
> c               bpp(jp,32) = ecc
> c               bpp(jp,29) = ngtv2
> c               bpp(jp,33) = 11.0
>                btype = 13
2297c2768
<                ecc_bk = ecc 
---
>                ecc_bk = ecc            
2299,2301c2770,2771
< *               btype = 12
< *               bpp(jp,10) = 9.0
<                bpp(jp,10) = 12.0
---
> c               bpp(jp,33) = 9.0
>                btype = 12
2325,2339c2795,2836
<          jp = MIN(jpmax,jp + 1)
<          bpp(jp,1) = tphys
<          bpp(jp,2) = mass(1)
< *         if(kstar(1).eq.15.and.bpp(jp-1,4).lt.15.0)then
< *            bpp(jp,2) = mass0(1)
< *         endif
<          bpp(jp,3) = mass(2)
< *         if(kstar(2).eq.15.and.bpp(jp-1,5).lt.15.0)then
< *            bpp(jp,3) = mass0(2)
< *         endif
<          bpp(jp,4) = float(kstar(1))
<          bpp(jp,5) = float(kstar(2))
<          bpp(jp,6) = zero
<          bpp(jp,7) = zero
<          bpp(jp,8) = zero
---
> c         jp = MIN(200,jp + 1)
> c         bpp(jp,1) = tphys
> c         bpp(jp,2) = float(kstar(1))
> c         bpp(jp,3) = mass0(1)
> c         bpp(jp,4) = mass(1)
> c         if(kstar(1).eq.15.and.bpp(jp-1,2).lt.15.0)then
> c            bpp(jp,4) = mass0(1)
> c         endif
> c         bpp(jp,5) = log10(lumin(1))
> c         bpp(jp,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                        (rad(1)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,7) = log10(teff1)
> c         bpp(jp,8) = massc(1)
> c         bpp(jp,9) = radc(1)
> c         bpp(jp,10) = menv(1)
> c         bpp(jp,11) = renv(1)
> c         bpp(jp,12) = epoch(1)
> c         bpp(jp,13) = ospin(1)
> c         bpp(jp,14) = dmt(1) - dmr(1)
> c         bpp(jp,15) = zero
> c         bpp(jp,16) = float(kstar(2))
> c         bpp(jp,17) = mass0(2)
> c         bpp(jp,18) = mass(2)
> c         if(kstar(2).eq.15.and.bpp(jp-1,16).lt.15.0)then
> c            bpp(jp,18) = mass0(2)
> c         endif
> c         bpp(jp,19) = log10(lumin(2))
> c         bpp(jp,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                        (rad(2)**2.d0))**(1.d0/4.d0))
> c         bpp(jp,21) = log10(teff2)
> c         bpp(jp,22) = massc(2)
> c         bpp(jp,23) = radc(2)
> c         bpp(jp,24) = menv(2)
> c         bpp(jp,25) = renv(2)
> c         bpp(jp,26) = epoch(2)
> c         bpp(jp,27) = ospin(2)
> c         bpp(jp,28) = dmt(2) - dmr(2)
> c         bpp(jp,30) = tb
> c         bpp(jp,31) = zero
> c         bpp(jp,32) = zero
2341,2344c2838,2840
<             bpp(jp,9) = ngtv
< *            bpp(jp,10) = 6.0
<             bpp(jp,10) = 10.0
< *            btype = 10
---
> c            bpp(jp,29) = ngtv
> c            bpp(jp,33) = 6.0
>             btype = 10
2350,2353c2846,2848
<             bpp(jp,9) = ngtv2
< *            bpp(jp,10) = 11.0
<             bpp(jp,10) = 13.0
< *            btype = 13
---
> c            bpp(jp,29) = ngtv2
> c            bpp(jp,33) = 9.0
>             btype = 13
2355,2359c2850,2854
<             bpp(jp,6) = sep
<             bpp(jp,7) = ecc
<             bpp(jp,8) = rad(1)/rol(1)
<             bpp(jp,9) = rad(2)/rol(2)
<             bpp(jp,10) = -1.0
---
> c            bpp(jp,31) = sep
> c            bpp(jp,32) = ecc
> c            bpp(jp,15) = rad(1)/rol(1)
> c            bpp(jp,29) = rad(2)/rol(2)
> c            bpp(jp,33) = 10.0
2362d2856
< *
2376,2437c2870,2935
< 
< *      if((isave.and.tphys.ge.tsave).or.iplot)then
< *         ip = ip + 1
< *         bcm(ip,1) = tphys
< *         bcm(ip,2) = float(kstar(1))
< *         bcm(ip,3) = mass0(1)
< *         bcm(ip,4) = mass(1)
< *         bcm(ip,5) = log10(lumin(1))
< *         bcm(ip,6) = log10(rad(1))
< *         teff1 = 1000.d0*((1130.d0*lumin(1)/
< *     &                    (rad(1)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,7) = log10(teff1)
< *         bcm(ip,8) = massc(1)
< *         bcm(ip,9) = radc(1)
< *         bcm(ip,10) = menv(1)
< *         bcm(ip,11) = renv(1)
< *         bcm(ip,12) = epoch(1)
< *         bcm(ip,13) = ospin(1)
< *         bcm(ip,15) = rad(1)/rol(1)
< *         bcm(ip,16) = float(kstar(2))
< *         bcm(ip,17) = mass0(2)
< *         bcm(ip,18) = mass(2)
< *         bcm(ip,19) = log10(lumin(2))
< *         bcm(ip,20) = log10(rad(2))
< *         teff2 = 1000.d0*((1130.d0*lumin(2)/
< *     &                    (rad(2)**2.d0))**(1.d0/4.d0))
< *         bcm(ip,21) = log10(teff2)
< *         bcm(ip,22) = massc(2)
< *         bcm(ip,23) = radc(2)
< *         bcm(ip,24) = menv(2)
< *         bcm(ip,25) = renv(2)
< *         bcm(ip,26) = epoch(2)
< *         bcm(ip,27) = ospin(2)
< *         bcm(ip,29) = rad(2)/rol(2)
< *         bcm(ip,30) = tb
< *         bcm(ip,31) = sep
< *         bcm(ip,32) = ecc
< *         dt = MAX(dtm,1.0d-12)*1.0d+06
< *         if(j1.eq.1)then
< *            bcm(ip,14) = (-1.0*dm1 - dms(1))/dt
< *            bcm(ip,28) = (dm2 - dms(2))/dt
< *         else
< *            bcm(ip,14) = (dm2 - dms(1))/dt
< *            bcm(ip,28) = (-1.0*dm1 - dms(2))/dt
< *         endif
< *         if(isave) tsave = tsave + dtp
< *         if(tphysf.le.0.d0)then
< *            ip = ip + 1
< *            do 145 , k = 1,32
< *               bcm(ip,k) = bcm(ip-1,k)
< * 145        continue
< *         endif
< *      endif
< *
< *      tphysf = tphys
< *      if(sgl)then
< *         if(ecc.ge.0.d0.and.ecc.le.1.d0) ecc = -1.d0
< *         tb = -1.d0
< *      endif
< 
< **     use backup hyperbolic orbit eccentricity
<       if(ecc_bk.ge.1.0) ecc = ecc_bk
---
> c      if((isave.and.tphys.ge.tsave).or.iplot)then
> c         ip = ip + 1
> c         if(ip.gt.50000)then
> c            WRITE(99,*)' EVOLV3 ARRAY ERROR bcm ',mass1i,mass2i,tbi,ecci
> c            saveflag = .false.
> c            goto 150
> c         endif
> c         bcm(ip,1) = tphys
> c         bcm(ip,2) = float(kstar(1))
> c         bcm(ip,3) = mass0(1)
> c         bcm(ip,4) = mass(1)
> c         bcm(ip,5) = log10(lumin(1))
> c         bcm(ip,6) = log10(rad(1))
> c         teff1 = 1000.d0*((1130.d0*lumin(1)/
> c     &                    (rad(1)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,7) = log10(teff1)
> c         bcm(ip,8) = massc(1)
> c         bcm(ip,9) = radc(1)
> c         bcm(ip,10) = menv(1)
> c         bcm(ip,11) = renv(1)
> c         bcm(ip,12) = epoch(1)
> c         bcm(ip,13) = ospin(1)
> c         bcm(ip,15) = rad(1)/rol(1)
> c         bcm(ip,16) = float(kstar(2))
> c         bcm(ip,17) = mass0(2)
> c         bcm(ip,18) = mass(2)
> c         bcm(ip,19) = log10(lumin(2))
> c         bcm(ip,20) = log10(rad(2))
> c         teff2 = 1000.d0*((1130.d0*lumin(2)/
> c     &                    (rad(2)**2.d0))**(1.d0/4.d0))
> c         bcm(ip,21) = log10(teff2)
> c         bcm(ip,22) = massc(2)
> c         bcm(ip,23) = radc(2)
> c         bcm(ip,24) = menv(2)
> c         bcm(ip,25) = renv(2)
> c         bcm(ip,26) = epoch(2)
> c         bcm(ip,27) = ospin(2)
> c         bcm(ip,29) = rad(2)/rol(2)
> c         bcm(ip,30) = tb
> c         bcm(ip,31) = sep
> c         bcm(ip,32) = ecc
> c         dt = MAX(dtm,1.0d-12)*1.0d+06
> c         if(j1.eq.1)then
> c            bcm(ip,14) = (-1.0*dm1 - dms(1))/dt
> c            bcm(ip,28) = (dm2 - dms(2))/dt
> c         else
> c            bcm(ip,14) = (dm2 - dms(1))/dt
> c            bcm(ip,28) = (-1.0*dm1 - dms(2))/dt
> c         endif
> c         if(isave) tsave = tsave + dtp
> c         if(tphysf.le.0.d0)then
> c            ip = ip + 1
> c            do 145 , k = 1,32
> c               bcm(ip,k) = bcm(ip-1,k)
> c 145        continue
> c         endif
> c      endif
> *
> c      tphysf = tphys
> c      if(sgl)then
> c         if(ecc.ge.0.d0.and.ecc.le.1.d0) ecc = -1.d0
> c         tb = -1.d0
> c      endif
> *
> *     use backup hyperbolic orbit eccentricity
>       if(btype==13) ecc = ecc_bk
2439,2454c2937,2951
< 
<       if (jp.ge.jpmax) then
<          write(*,*) 'Warning: BSE event storage overflow!'
<       else 
<          bpp(jp+1,10) = -1.0
<       endif
< *      if(jp.ge.80)then
< *         WRITE(99,*)' EVOLV2 ARRAY ERROR ',mass1i,mass2i,tbi,ecci
< *         WRITE(*,*)' STOP: EVOLV2 ARRAY ERROR '
< *         CALL exit(0)
< *         STOP
< *      elseif(jp.ge.40)then
< *         WRITE(99,*)' EVOLV2 ARRAY WARNING ',mass1i,mass2i,tbi,ecci,jp
< *      endif
< *      bcm(ip+1,1) = -1.0
< *      bpp(jp+1,1) = -1.0
---
> *
> c      if(jp.ge.200.and.saveflag.eqv..true.)then
> c         WRITE(99,*)' EVOLV3 ARRAY ERROR ',mass1i,mass2i,tbi,ecci
> c         WRITE(*,*)' STOP: EVOLV3 ARRAY ERROR '
> C         CALL exit(0)
> c         STOP
> c         saveflag = .false.
> c         goto 150
> c      elseif(jp.ge.160)then
> c         WRITE(99,*)' EVOLV3 ARRAY WARNING ',mass1i,mass2i,tbi,ecci,jp
> c      endif
> c      bcm(ip+1,1) = -1.0
> c      bpp(jp+1,1) = -1.0
> *	
> c 150  continue
