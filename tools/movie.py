#!/usr/bin/env python3
import sys
import collections
import numpy as np
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
from matplotlib import animation, rc
from matplotlib import cm
import getopt
import petar

plt.style.use('dark_background')

if __name__ == '__main__':

    filename='dat.lst'
    dt = 60
    R = 1
    framescale=20
    lum_min = 1e-5
    lum_max = 1e6
    temp_min = 1000
    temp_max = 50000
    semi_min = 1e-7
    semi_max = 0.1
    ecc_min = 0.0
    ecc_max = 1.0
    output_file = 'movie'
    skiprows = 0
    xcol = -1
    ycol = -1
    mcol = -1
    G = 0.00449830997959438 # pc^3/(Msun*Myr^2)
    interrupt_mode='bse'
    plot_HRdiagram=False
    plot_zoom=False
    plot_semi_ecc=False
    generate_binary=2
    ncol= -1
    frame_xsize= 8
    frame_ysize= 8

    def usage():
        print("A tool for processing a list of snapshot data to detect binaries, calculate Langragian radii and properties, get the density center and core radius")
        print("Usage: petar.motion.movie [options] data_list_filename")
        print("data_list_filename: A list of snapshot data path, each line for one snapshot")
        print("option: default values are shown at last")
        print("  -h(--help): help")
        print("  -s: output frame speed: ",dt)
        print("  -R: movie box length: ",R)
        print("  -z: plot zoom frame with emplification factor of: ",framescale)
        print("  -H: plot HR-diagram")
        print("  -b: plot semi-ecc diagram for binaries")
        print("  -G: gravitational constant for calculating binary orbit: ",G)
        print("  -o: output movie filename: ",output_file)
        print("  --lum-min: minimum lumonisity: ",lum_min)
        print("  --lum-max: maximum lumonisity: ",lum_max)
        print("  --temp-min: minimum temperature: ",temp_min)
        print("  --temp-max: maximum temperature: ",temp_max)
        print("  --semi-min: minimum semi-major axis: ",semi_min)
        print("  --semi-max: minimum semi-major axis: ",semi_max)
        print("  --ecc-min: minimum eccentricity: ",ecc_min)
        print("  --ecc-max: maximum eccentricity: ",ecc_max)
        print("  --interrupt-mode: no, base, bse: ",interrupt_mode)
        print("  --xcol: column index for x-axis: Unset")
        print("  --ycol: column index for x-axis: Unset")
        print("  --mcol: column index for mass, if not set and not PeTar output, assume equal mass: Unset")
        print("  --skiprows: number of rows to escape when read snapshot: Unset")
        print("  --generate-binary: 0: no binary, 1: detect binary by using KDtree (slow), 2: read single and binary data generated by petar.data.process: ",generate_binary)
        print("  --plot-ncols: column number of panels: same as panels")
        print("  --plot-xsize: x size of panel: ",frame_xsize)
        print("  --plot-ysize: y size of panel: ",frame_ysize)
        print("PS:: when xcol, ycol, skiprows are not provided, the snapshot files are assumed to be the output of PeTar")

    try:
        shortargs = 's:R:z:o:G:Hbh'
        longargs = ['help','lum-min=','lum-max=','temp-min=','temp-max=','semi-min=','semi-max=','ecc-min=','ecc-max=','interrupt-mode=','xcol=','ycol=','mcol=','skiprows=','generate-binary=','plot-ncols=','plot-xsize=','plot-ysize=']
        opts,remainder= getopt.getopt( sys.argv[1:], shortargs, longargs)

        for opt,arg in opts:
            if opt in ('-h','--help'):
                usage()
                sys.exit(1)
            elif opt in ('-s'):
                dt = float(arg)
            elif opt in ('-R'):
                R = float(arg)
            elif opt in ('-z'):
                framescale = float(arg)
                plot_zoom = True
            elif opt in ('-H'):
                plot_HRdiagram = True
            elif opt in ('-b'):
                plot_semi_ecc = True
            elif opt in ('-o'):
                output_file = arg
            elif opt in ('-G'):
                G = float(arg)
            elif opt in ('--lum-min'):
                lum_min = float(arg)
            elif opt in ('--lum-max'):
                lum_max = float(arg)
            elif opt in ('--temp-min'):
                temp_min = float(arg)
            elif opt in ('--temp-max'):
                temp_max = float(arg)
            elif opt in ('--semi-min'):
                semi_min = float(arg)
            elif opt in ('--semi-max'):
                semi_max = float(arg)
            elif opt in ('--ecc-min'):
                ecc_min = float(arg)
            elif opt in ('--ecc-max'):
                ecc_max = float(arg)
            elif opt in ('--interrupt-mode'):
                interrupt_mode = arg
                if (interrupt_mode!='bse'): plot_HRdiagram = False
            elif opt in ('--xcol'):
                xcol = int(arg)
            elif opt in ('--ycol'):
                ycol = int(arg)
            elif opt in ('--mcol'):
                mcol = int(arg)
            elif opt in ('--skiprows'):
                skiprows = int(arg)
            elif opt in ('--generate-binary'):
                generate_binary=int(arg)
            elif opt in ('--plot-ncols'):
                ncol = int(arg)
            elif opt in ('--plot-xsize'):
                frame_xsize = float(arg)
            elif opt in ('--plot-ysize'):
                frame_ysize = float(arg)
            else:
                assert False, "unhandeld option"

    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    xsize=frame_xsize
    ysize=frame_ysize
    nrow= 1
    if (ncol<0):
        ncol = 1
        if (plot_zoom):
            ncol += 1
            xsize += frame_xsize
        if (plot_HRdiagram):
            ncol += 1
            xsize += frame_xsize
        if (plot_semi_ecc):
            ncol += 1
            xsize += frame_xsize
    else:
        xsize = ncol*frame_xsize
        nall = 1
        if (plot_zoom): nall+=1
        if (plot_HRdiagram): nall+=1
        if (plot_semi_ecc): nall+=1
        nrow = nall/ncol
        if (nrow*ncol<nall): nrow+=1
        ysize = nrow*frame_ysize
    fig, axe = plt.subplots(nrow,ncol,figsize=(xsize, ysize))
    if (nrow>1) & (ncol>1): axe=axe.flatten()
    if (nrow==1) & (ncol==1): axe=[axe]

    nlayer_cross=5
    nlayer_point=10
    nlayer = nlayer_cross + nlayer_point
    alpha_amplifier = 2.5
    alphascale=np.linspace(1,nlayer,nlayer)*2.0/(nlayer*(nlayer+1))*alpha_amplifier
    print('Alpha layer sequence:',alphascale,' sum:',alphascale.sum())
    sizescale=np.logspace(0,3,nlayer)[::-1]
    print('Size layer sequence:',sizescale)

    ptcls=[]

    filename = remainder[0]

    fl = open(filename,'r')
    file_list = fl.read()
    path_list = file_list.splitlines()

    def init():
        boxsize=2.0*R
        axe[0].set_xlim(-boxsize,boxsize)
        axe[0].set_ylim(-boxsize,boxsize)
        axe[0].set_aspect(1.0)
        axe[0].set_xlabel('x')
        axe[0].set_ylabel('y')

        for i in range(nlayer_cross):
            pt =axe[0].scatter([],[],marker='+',alpha=alphascale[i],edgecolors='none')
            ptcls.append(pt)
        for i in range(nlayer_point):
            pt =axe[0].scatter([],[],alpha=alphascale[i],edgecolors='none')
            ptcls.append(pt)

        iaxe=1
        if plot_zoom:
            boxsize /= framescale
            axe[iaxe].set_xlim(-boxsize,boxsize)
            axe[iaxe].set_ylim(-boxsize,boxsize)
            axe[iaxe].set_aspect(1.0)
            axe[iaxe].set_xlabel('x')
            axe[iaxe].set_ylabel('y')

            for i in range(nlayer_cross):
                pt =axe[iaxe].scatter([],[],marker='+',alpha=alphascale[i],edgecolors='none')
                ptcls.append(pt)
            for i in range(nlayer_point):
                pt =axe[iaxe].scatter([],[],alpha=alphascale[i],edgecolors='none')
                ptcls.append(pt)
            iaxe +=1

        if plot_HRdiagram:
            pt =axe[iaxe].scatter([],[],marker='.',edgecolors='none')
            ptcls.append(pt)
            axe[iaxe].set_xlim(temp_max,temp_min);
            axe[iaxe].set_ylim(lum_min,lum_max);
            axe[iaxe].set_yscale('log');
            axe[iaxe].set_xscale('log');
            axe[iaxe].set_xlabel(r'$T_{eff}[K]$')
            axe[iaxe].set_ylabel(r'$L[L_\odot]$')
            iaxe +=1

        if plot_semi_ecc:
            pt =axe[iaxe].scatter([],[],marker='+',edgecolors='none')
            ptcls.append(pt)
            axe[iaxe].set_xscale('log')
            axe[iaxe].set_xlim(semi_min,semi_max)
            axe[iaxe].set_ylim(ecc_min,ecc_max)
            axe[iaxe].set_xlabel('semi')
            axe[iaxe].set_ylabel('ecc')
            #axe[iaxe].legend(loc='upper left')
            iaxe +=1
     
        axe[0].set_title('T = %f' % 0)

        return ptcls

    def animate(k):

        file_path = path_list[k]
        print('process ',file_path)
        data=dict()
        if (xcol>=0) & (ycol>=0):
            if (mcol>=0):
                data['x'], data['y'] ,data['mass'] = np.loadtxt(file_path, unpack=True, usecols=(xcol,ycol,mcol), ndmin=2, skiprows=skiprows)
            else:
                data['x'], data['y'] = np.loadtxt(file_path, unpack=True, usecols=(xcol,ycol), ndmin=2, skiprows=skiprows)
                data['mass'] = np.ones(data['x'].size)
            data['t'] = file_path
        else:
            fp = open(file_path, 'r')
            header=fp.readline()
            file_id, n_glb, data['t'] = header.split()
            fp.close()

            if (generate_binary>0):
                if (generate_binary==2):
                    single = petar.Particle(interrupt_mode=interrupt_mode)
                    p1 = petar.Particle(interrupt_mode=interrupt_mode)
                    p2 = petar.Particle(interrupt_mode=interrupt_mode)
                    binary = petar.Binary(p1,p2)
                    single.loadtxt(file_path+'.single')
                    binary.loadtxt(file_path+'.binary')
                    data['x'] = np.concatenate((single.pos[:,0], binary.p1.pos[:,0], binary.p2.pos[:,0])) 
                    data['y'] = np.concatenate((single.pos[:,1], binary.p1.pos[:,1], binary.p2.pos[:,1])) 
                    data['mass'] = np.concatenate((single.mass, binary.p1.mass, binary.p2.mass))
                    data['semi'] = binary.semi
                    data['ecc'] = binary.ecc
                    data['state'] = binary.p1.binary_state
                    if (interrupt_mode=='bse'):
                        data['lum'] = np.concatenate((single.s_lum, binary.p1.s_lum, binary.p2.s_lum))
                        data['rad'] = np.concatenate((single.s_rad, binary.p1.s_rad, binary.p2.s_rad))
                        data['type']= np.concatenate((single.s_type,binary.p1.s_type,binary.p2.s_type))
                        temp_single = 5778*(single.s_lum/(single.s_rad*single.s_rad))**0.25
                        temp_b1 = 5778*(binary.p1.s_lum/(binary.p1.s_rad*binary.p1.s_rad))**0.25
                        temp_b2 = 5778*(binary.p2.s_lum/(binary.p2.s_rad*binary.p2.s_rad))**0.25
                        temp_binary = (temp_b1*binary.p1.s_lum+temp_b2*binary.p2.s_lum)/(binary.p1.s_lum+binary.p2.s_lum)
                        data['temp']= np.concatenate((temp_single, temp_b1, temp_b2))
                        data['lum_cm'] = np.append(single.s_lum, binary.p1.s_lum+binary.p2.s_lum)
                        data['temp_cm']= np.append(temp_single,temp_binary)
                        data['type_cm']= np.append(single.s_type,np.max([binary.p1.s_type,binary.p2.s_type],axis=0))
                else:
                    particles=petar.Particle(interrupt_mode=interrupt_mode)
                    particles.loadtxt(file_path,skiprows=1)
                    kdtree,single,binary = petar.findPair(particles, G, semi_max*2.0, True)
                    data['x'] = particles.pos[:,0]
                    data['y'] = particles.pos[:,1]
                    data['mass'] =particles.mass
                    data['semi'] = binary.semi
                    data['ecc'] = binary.ecc
                    data['state'] = binary.p1.binary_state
                    if (interrupt_mode=='bse'):
                        data['lum'] = particles.s_lum
                        data['rad'] = particles.s_rad
                        data['type']= particles.s_type
                        data['lum_cm'] = np.append(single.s_lum, binary.p1.s_lum+binary.p2.s_lum)
                        data['temp']= 5778*(data['lum']/(data['rad']*data['rad']))**0.25
                        temp_single = 5778*(single.s_lum/(single.s_rad*single.s_rad))**0.25
                        temp_b1 = 5778*(binary.p1.s_lum/(binary.p1.s_rad*binary.p1.s_rad))**0.25
                        temp_b2 = 5778*(binary.p2.s_lum/(binary.p2.s_rad*binary.p2.s_rad))**0.25
                        temp_binary = (temp_b1*binary.p1.s_lum+temp_b2*binary.p2.s_lum)/(binary.p1.s_lum+binary.p2.s_lum)
                        #temp_binary = temp_b1
                        #sel = (binary.p1.s_lum<binary.p2.s_lum)
                        #temp_binary[sel] = temp_b2[sel]
                        #print(temp_single.size,temp_binary.size,data['lum_cm'].size)
                        data['temp_cm']= np.append(temp_single,temp_binary)
                        data['type_cm']= np.append(single.s_type,np.max([binary.p1.s_type,binary.p2.s_type],axis=0))
            else:
                particles=petar.Particle(interrupt_mode=interrupt_mode)
                particles.loadtxt(file_path,skiprows=1)
                data['x'] = particles.pos[:,0]
                data['y'] = particles.pos[:,1]
                data['mass'] =particles.mass
                if (interrupt_mode=='bse'):
                    data['lum'] = particles.s_lum
                    data['rad'] = particles.s_rad
                    data['type']= particles.s_type

        x = data['x']
        y = data['y']
        mass = data['mass']
        boxsize = 2.0*R
        xcm = x.sum()/x.size
        ycm = y.sum()/y.size
        sel=(x-xcm>-boxsize) & (x-xcm<boxsize) & (y-ycm>-boxsize) & (y-ycm<boxsize)
        nsel=sel.sum()
        xcm = (x[sel]).sum()/float(nsel)
        ycm = (y[sel]).sum()/float(nsel)
        x = x - xcm
        y = y - ycm
        axe[0].set_title('T = '+data['t'])

        colors='w'
        if ('lum' in data.keys()):
            luminosity = data['lum']
            radius = data['rad']
            temperature_eff = data['temp']
            LogTeff=(np.log10(temperature_eff)-np.log10(temp_min))/(np.log10(temp_max)-np.log10(temp_min))
            colors=cm.rainbow(1.0-LogTeff)
        #sizes = (np.log10(luminosity)-np.log10(lum_min)+1)*100
        #sizes = luminosity

        ilayer=0
        for i in range(nlayer):
            sizes = mass*sizescale[i]
            #sizes = (np.log10(luminosity)-np.log10(lum_min)+1)
            #sizes = luminosity
            ptcls[i].set_offsets(np.array([x,y]).transpose())
            ptcls[i].set_sizes(sizes)
            ptcls[i].set_color(colors)
            ilayer = nlayer

        if plot_zoom:
            for i in range(nlayer):
                sizes = mass*framescale*sizescale[i]
                ptcls[ilayer+i].set_offsets(np.array([x,y]).transpose())
                ptcls[ilayer+i].set_sizes(sizes)
                ptcls[ilayer+i].set_color(colors)
            ilayer += nlayer

        if plot_HRdiagram:
            if (generate_binary>0):
                types = data['type_cm']
                colors = cm.rainbow(types/15.0)
                ptcls[ilayer].set_offsets(np.array([data['temp_cm'], data['lum_cm']]).transpose())
                ptcls[ilayer].set_color(colors)
            else:
                types = data['type']
                colors = cm.rainbow(types/15.0)
                ptcls[ilayer].set_offsets(np.array([data['temp'], data['lum']]).transpose())
                ptcls[ilayer].set_color(colors)
            ilayer += 1

        if plot_semi_ecc:
            types = data['state']
            colors = cm.rainbow(types/13.0)
            ptcls[ilayer].set_offsets(np.array([data['semi'],data['ecc']]).transpose())
            ptcls[ilayer].set_color(colors)
            ilayer += 1

        return ptcls

    n_frame = len(path_list)

    anime = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=n_frame, interval=dt, blit=True)
    
    #gravity.stop()
    #stellar_evolution.stop()

    anime.save(output_file+'.mp4', fps=30, extra_args=['-vcodec', 'libx264'])    

